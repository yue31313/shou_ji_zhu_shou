String num;//手机串号
	String driver;//运营商
	String network_type;//网络类型
	String isroot;//是否Root

	String cpu_type;//CPU型号
	String cpu_num;//CPU核心数
	String max;//最高频率
	String min;//最低频率
	String now;//当前频率

	String run_count;//运行内存总量
	String phone_count;//手机内存总量
	String sd_count;//SD卡内存

	String resolution;//屏幕分辨率
	String density;//像素密度
	String touch;//多点触控

	String camera_px;//摄像头像素
	String camera_size;//摄像头最大尺寸
	String light;//闪光灯

	String wifi_name;//WIFI连接到
	String wifi_ip;//WIFI地址
	String wifi_speed;//WIFI连接速度
	String mac_address;//Mac地址
	String bluetooth_state;//蓝牙状态
	TelephonyManager telephonemanage;




	//手机信息
	private void phoneInfo() {
		telephonemanage = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
		//
		num = telephonemanage.getDeviceId() + "";
		driver = getProvidersName();
		// 网络类型
		network_type = getNetworkType();
		// 是否Root
		isroot = isRoot();
	}
//内存
	private void phoneMemory() {
		run_count = AppInfoManager.memSize / 1024 / 1024 + "MB";
		phone_count = AppInfoManager.total_memory / 1024 / 1024 + "MB";
		sd_count = getSDCardSize() / 1024 / 1024 + "MB";
		resolution = getResolution();
		density = getDensity() + "";
		Method methods[] = MotionEvent.class.getDeclaredMethods();
		for (Method m : methods) {
			
			if (m.getName().contains("getPointerCount")
					&& m.getName().equals("getPointerId")) {
				touch = "不支持";
			} else {
				touch = "支持";
			}

		}

	}

	//像素
	private void phonePixel() {
		Camera camera = Camera.open();
		Parameters parameters = camera.getParameters();
		String states = parameters.getFlashMode();
		List<Size> s = parameters.getSupportedPictureSizes();

		Display display = getWindowManager().getDefaultDisplay();
		int width = display.getWidth();
		int height = display.getHeight();
		System.out.println(s.get(0).width + " 像素" + s.get(0).height
				+ s.get(0).toString());
		int px = s.get(0).width * s.get(0).height;
		camera_px = px + "";
		camera_size = width + "x" + height;
		if ("".equals(states) || states == null) {
			light = "该设备不支持！！！";
		} else {
			light = states;
		}

	}

	// WIFI
	private void phoneWifi() {
		WifiInfo info = ((WifiManager) getSystemService(WIFI_SERVICE))
				.getConnectionInfo();

		wifi_name = info.getSSID() + "";
		wifi_ip = longToIP((int) info.getIpAddress());
		wifi_speed = info.getLinkSpeed() + "";
		mac_address = info.getMacAddress() + "";
		// BluetoothAdapter ba = BluetoothAdapter.getDefaultAdapter();
		// if (ba.isEnabled()) {
		// bluetooth_state = "开";
		// } else {
		// bluetooth_state = "关";
		// }
	}
/**
	 *获取手机运营商
	 * 
	 * @return
	 */
	public String getProvidersName() {
		String ProvidersName = null;
	
		TelephonyManager telephonyManager = (TelephonyManager) this
				.getSystemService(Context.TELEPHONY_SERVICE);// ???sim???????
		String simOperator = telephonyManager.getSimOperator();
		String type = "类型";
		
		if ("46000".equals(simOperator)) {
			type = "中国移动";
		} else if ("46002".equals(simOperator)) {
			type = "中国移动";
		} else if ("46001".equals(simOperator)) {// ?й?j???46001
			type = "中国联通";
		} else if ("46003".equals(simOperator)) {// ?й?????46003
			type = "中国电信";
		}
		return type;
	}

	/**
	 * 得到网络类型
	 * 
	 * @return
	 */
	private String getNetworkType() {
		ConnectivityManager connManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkinfo = connManager.getActiveNetworkInfo();
		String networkType = "";
		if (networkinfo != null) {
			networkType = networkinfo.getTypeName();
		}

		return networkType;
	}

	//检测手机是否ROOt
	private String isRoot() {
		Process process = null;
		DataOutputStream os = null;
		try {
			process = Runtime.getRuntime().exec("su");
			os = new DataOutputStream(process.getOutputStream());
			os.writeBytes("ls /data/\n");
			os.writeBytes("exit\n");
			os.flush();
			process.waitFor();
		} catch (Exception e) {

			return "否";
		} finally {
			try {
				if (os != null) {
					os.close();
				}
				process.destroy();
			} catch (Exception e) {
				// nothing
			}
		}
		return "是";
	}

	
	private String longToIP(long longIp) {
		
		StringBuffer sb = new StringBuffer("");
		//将高24位置0
		sb.append(String.valueOf((longIp & 0x000000FF)));
		sb.append(".");
		//将高1位置0，然后右移8位
		sb.append(String.valueOf((longIp & 0x0000FFFF) >>> 8));
		sb.append(".");
		//将高8位置0，然后右移16位
		sb.append(String.valueOf((longIp & 0x00FFFFFF) >>> 16));
		sb.append(".");
		//直接右移24位
		sb.append(String.valueOf((longIp >>> 24)));
		return sb.toString();
	}

	private long getSDCardSize() {

		File path = Environment.getExternalStorageDirectory();

		StatFs stat = new StatFs(path.getPath());

		/*获取block的SIZE*/

		long blockSize = stat.getBlockSize();

		/*块数量*/

		long availableBlocks = stat.getBlockCount();

		/*返回bit大小*/

		return availableBlocks * blockSize;

	}


/**
	 * 像素密度
	 * 
	 * @return
	 */
	private float getDensity() {
		DisplayMetrics metric = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(metric);
		return metric.density;
	}



class CpuManager {

	
	public static String getMaxCpuFreq() {
		String result = "";
		ProcessBuilder cmd;
		try {
			String[] args = { "/system/bin/cat",
					"/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq" };
			cmd = new ProcessBuilder(args);
			Process process = cmd.start();
			InputStream in = process.getInputStream();
			byte[] re = new byte[24];
			while (in.read(re) != -1) {
				result = result + new String(re);
			}
			in.close();
		} catch (IOException ex) {
			ex.printStackTrace();
			result = "N/A";
		}
		return result.trim();
	}

	//CPU最小频率
	public static String getMinCpuFreq() {
		String result = "";
		ProcessBuilder cmd;
		try {
			String[] args = { "/system/bin/cat",
					"/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq" };
			cmd = new ProcessBuilder(args);
			Process process = cmd.start();
			InputStream in = process.getInputStream();
			byte[] re = new byte[24];
			while (in.read(re) != -1) {
				result = result + new String(re);
			}
			in.close();
		} catch (IOException ex) {
			ex.printStackTrace();
			result = "N/A";
		}
		return result.trim();
	}

	//当前频率
	public static String getCurCpuFreq() {
		String result = "N/A";
		try {
			FileReader fr = new FileReader(
					"/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq");
			BufferedReader br = new BufferedReader(fr);
			String text = br.readLine();
			result = text.trim();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}

	//CPU名字
	public static String getCpuName() {
		try {
			FileReader fr = new FileReader("/proc/cpuinfo");
			BufferedReader br = new BufferedReader(fr);
			String text = br.readLine();
			String[] array = text.split(":\\s+", 2);
			for (int i = 0; i < array.length; i++) {
			}
			return array[1];
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static int getNumCores() {
		class CpuFilter implements FileFilter {
			@Override
			public boolean accept(File pathname) {
				if (Pattern.matches("cpu[0-9]", pathname.getName())) {
					return true;
				}
				return false;
			}
		}

		try {
			File dir = new File("/sys/devices/system/cpu/");
			File[] files = dir.listFiles(new CpuFilter());
			return files.length;
		} catch (Exception e) {
			e.printStackTrace();
			return 1;
		}
	}
}
// cpu信息
	private void cpuInfo() {
		// CPU型号
		cpu_type = CpuManager.getCpuName();
		//
		cpu_num = CpuManager.getNumCores() + "";
		max = CpuManager.getMaxCpuFreq();
		min = CpuManager.getMinCpuFreq();
		now = CpuManager.getCurCpuFreq();
	}